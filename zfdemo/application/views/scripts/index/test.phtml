<!--<script language="javascript" type="text/javascript" src="/scripts/excanvas.js"></script>-->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js"></script>
<!--<link rel="stylesheet" type="text/css" href="/scripts/extjs/resources/css/ext-all.css" />
<script type="text/javascript" src="/scripts/extjs/adapter/jquery/ext-jquery-adapter.js"></script>
<script type="text/javascript" src="/scripts/extjs/ext-all.js"></script>
<script type="text/javascript" src="/scripts/extjs/src/locale/ext-lang-ru.js"></script>-->

<meta name="http-equiv" content="Content-type: text/html; charset=UTF-8">
<!--<link rel="stylesheet" type="text/css" href="/scripts/extjs5/build/packages/ext-theme-neptune/build/resources/ext-theme-neptune-all.css" />-->
<link rel="stylesheet" type="text/css" href="/scripts/extjs5/build/packages/ext-theme-crisp-touch/build/resources/ext-theme-crisp-touch-all.css" />
<script type="text/javascript" src="/scripts/extjs5/build/ext.js"></script>
<script type="text/javascript" src="/scripts/extjs5/build/ext-all.js"></script>
<!--<script type="text/javascript" src="/scripts/extjs5/build/packages/ext-theme-neptune/build/ext-theme-neptune.js"></script>-->
<script type="text/javascript" src="/scripts/extjs5/build/packages/ext-crisp-touch/build/ext-theme-crisp-touch.js"></script>
<!--<script type="text/javascript" src="/scripts/test.js"></script>-->
<body>
    
</body>

<script> 

var storeUsers = new Ext.data.JsonStore({
    proxy: {
        type: 'ajax',
        url: '/index/get-data',
        reader: {
            type: 'json',
            rootProperty: 'data'
        }
    },
    fields:[
        {name : 'first_name'},
        {name : 'second_name'},
        {name : 'surname'},
        {name : 'email'},
        {name : 'phone_number'}
    ],
    autoLoad: true
 });

 var storeEducation = new Ext.data.JsonStore({
    proxy: {
        type: 'ajax',
        url: '/index/get-education-data',
        reader: {
            type: 'json',
            rootProperty: 'data'
        }
    },
    fields:[
        {name : 'name'},
        {name: 'id'}
    ],
    autoLoad: false
 });
 
 var storeEge = new Ext.data.JsonStore({
    proxy: {
        type: 'ajax',
        url: '/index/get-ege-data',
        reader: {
            type: 'json',
            rootProperty: 'data'
        }
    },
    fields:[
        {name: 'id'},
        {name: 'student_id'},
        {name: 'subject_pass'},
        {name: 'mark'},
        {name: 'year_pass'},
        {name: 'type_exam_pass'}
    ],
    autoLoad: false
 });
 
 var storeCountries = new Ext.data.JsonStore({
    proxy: {
        type: 'ajax',
        url: '/index/get-country-data',
        reader: {
            type: 'json',
            rootProperty: 'data'
        }
    },
    fields:[
        {name : 'name'},
        {name: 'id'}
    ],
    autoLoad: false
 });
 
 var storeRegion = new Ext.data.JsonStore({
    proxy: {
        type: 'ajax',
        url: '/index/get-region-data',
        reader: {
            type: 'json',
            rootProperty: 'data'
        }
    },
    fields:[
        {name : 'name'},
        {name: 'reg_code'}
    ],
    autoLoad: false
 });
 
 var storeCity = new Ext.data.JsonStore({
    proxy: {
        type: 'ajax',
        url: '/index/get-city-data',
        reader: {
            type: 'json',
            rootProperty: 'data'
        }
    },
    fields:[
        {name : 'name'},
        {name: 'city_code'},
        {name: 'reg_code'}
    ],
    autoLoad: false
 });
 
  var storeStreet = new Ext.data.JsonStore({
    proxy: {
        type: 'ajax',
        url: '/index/get-street-data',
        reader: {
            type: 'json',
            rootProperty: 'data'
        }
    },
    fields:[
        {name : 'name'},
        {name: 'street_code'}
    ],
    autoLoad: false
 });
 
 var storeYear = new Ext.data.JsonStore({
    proxy: {
        type: 'ajax',
        url: '/index/get-year-data',
        reader: {
            type: 'json',
            rootProperty: 'data'
        }
    },
    fields:[
        {name : 'name'},
        {name: 'id'}
    ],
    autoLoad: false
 });
 
 var storeEdinstitution = new Ext.data.JsonStore({
    proxy: {
        type: 'ajax',
        url: '/index/get-education-institution-type-data',
        reader: {
            type: 'json',
            rootProperty: 'data'
        }
    },
    fields:[
        {name : 'name'},
        {name: 'id'}
    ],
    autoLoad: false
 });
 
 var storeEducationDocumentType = new Ext.data.JsonStore({
    proxy: {
        type: 'ajax',
        url: '/index/get-education-document-type-data',
        reader: {
            type: 'json',
            rootProperty: 'data'
        }
    },
    fields:[
        {name : 'name'},
        {name: 'id'}
    ],
    autoLoad: false
 });
 
 var storeEducationType = new Ext.data.JsonStore({
    proxy: {
        type: 'ajax',
        url: '/index/get-education-type-data',
        reader: {
            type: 'json',
            rootProperty: 'data'
        }
    },
    fields:[
        {name : 'name'},
        {name: 'id'}
    ],
    autoLoad: false
 });
 
  var storeSubject = new Ext.data.JsonStore({
    proxy: {
        type: 'ajax',
        url: '/index/get-subject-data',
        reader: {
            type: 'json',
            rootProperty: 'data'
        }
    },
    fields:[
        {name : 'name'},
        {name: 'id'}
    ],
    autoLoad: false
 });
 
 var storeExamType = new Ext.data.JsonStore({
    proxy: {
         type: 'ajax',
         url: '/index/get-exam-type-data',
         reader:{
             type: 'json',
             rootProperty: 'data'
         }
     },
    fields:[
        {name : 'name'},
        {name: 'id'}
    ],
    autoLoad: false
 });
 
 var storeOSP = new Ext.data.JsonStore({
    proxy: {
        type: 'ajax',
        url: '/index/get-dictionary-osp-data',
        reader: {
            type: 'json',
            rootProperty: 'data'
        }
    },
    fields:[
        {name : 'name'},
        {name: 'id'}
        
    ],
    autoLoad: false
 });
 
 var storespecialization = new Ext.data.JsonStore({
    proxy: {
        type: 'ajax',
        url: '/index/get-dictionary-specialization-data',
        reader: {
            type: 'json',
            rootProperty: 'data'
        }
    },
    fields:[
        {name : 'name'},
        {name : 'id'}
        
    ],
    autoLoad: false
 });
 
 var storeSAE = new Ext.data.JsonStore({
    proxy: {
        type: 'ajax',
        url: '/index/get-dictionary-sae-data',
        reader: {
            type: 'json',
            rootProperty: 'data'
        }
    },
    fields:[
        {name : 'name'},
        {name: 'sae_id'}
        
    ],
    autoLoad: false
 });
 
 var storeprofile = new Ext.data.JsonStore({
    proxy: {
        type: 'ajax',
        url: '/index/get-dictionary-profile-data',
        reader: {
            type: 'json',
            rootProperty: 'data'
        }
    },
    fields:[
        {name : 'name'},
        {name: 'profile_id'}
        
    ],
    autoLoad: false
 });
 
 var storeformeducation = new Ext.data.JsonStore({
    proxy: {
        type: 'ajax',
        url: '/index/get-dictionary-form-education-data',
        reader: {
            type: 'json',
            rootProperty: 'data'
        }
    },
    fields:[
        {name : 'name'},
        {name: 'form_education_id'}
        
    ],
    autoLoad: false
 });
 
 var storeformeofpay = new Ext.data.JsonStore({
    proxy: {
        type: 'ajax',
        url: '/index/get-dictionary-form-payment-data',
        reader: {
            type: 'json',
            rootProperty: 'data'
        }
    },
    fields:[
        {name : 'name'},
        {name: 'form_payment_id'}
        
    ],
    autoLoad: false
 });
 
  var storeChoosingSpec = new Ext.data.JsonStore({
    proxy: {
        type: 'ajax',
        url: '/index/get-choosing-specialization-data',
        reader: {
            type: 'json',
            rootProperty: 'data'
        }
    },
    fields:[
        {name: 'id'},
        {name: 'student_id'},
        {name: 'priority'},
        {name: 'osp'},
        {name: 'specialization'},
        {name: 'sae'},
        {name: 'profile'}
    ],
    autoLoad: false
 });
 
 var storeExamsOsp = new Ext.data.JsonStore({
    proxy: {
        type: 'ajax',
        url: '/index/get-exam-osp-data',
        reader: {
            type: 'json',
            rootProperty: 'data'
        }
    },
    fields:[
        {name: 'id'},
        {name: 'student_id'},
        {name: 'exam_type'},
        {name: 'subject'},
        {name: 'date'},
        {name: 'time'},
        {name: 'auditorium'},
        {name: 'mark'}
         
    ],
    autoLoad: false
 });
 // store для особых прав 
 var storeSpecialRights = new Ext.data.JsonStore({
    proxy: {
        type: 'ajax',
        url: '/index/get-dictionary-type-special-rights-data',
        reader: {
            type: 'json',
            rootProperty: 'data'
        }
    },
    fields:[
        {name: 'id'},
        {name: 'name'}
      
         
    ],
    autoLoad: false
 });
  var storeReasonSpecialRights = new Ext.data.JsonStore({
    proxy: {
        type: 'ajax',
        url: '/index/get-dictionary-reason-special-rights-data',
        reader: {
            type: 'json',
            rootProperty: 'data'
        }
    },
    fields:[
        {name: 'id'},
        {name: 'name'}
      
         
    ],
    autoLoad: false
 });
 var storeTypeSpecialRights = new Ext.data.JsonStore({
    proxy: {
        type: 'ajax',
        url: '/index/get-dictionary-disability-group-data',
        reader: {
            type: 'json',
            rootProperty: 'data'
        }
    },
    fields:[
        {name: 'id'},
        {name: 'name'}
      
         
    ],
    autoLoad: false
 });
  
// Форма "Общая информация"
var Form = new Ext.FormPanel({
    id: 'form1',
    title: 'Общая информация',
    bodyPadding: 5,
    height: 500,
    width: 500,
    autoScroll: true,
    defaults: {
        anchor: '95%',
        labelWidth: 200
    },
    defaultType: 'textfield',
    items: [
        {
            fieldLabel: 'Имя',
            name: 'first_name',
            id: 'first_nameId',
            validator: function(value) {
            if (!/^[a-zA-Zа-яА-Я\s\-']+$/.test(value)) {
                return 'Пожалуйста, введите корректное данные';
            }
            return true;
            }
            //allowBlank: false
        },
        {
            fieldLabel: 'Отчество',
            name: 'second_name',
            id: 'second_nameId',
            validator: function(value) {
            if (!/^[a-zA-Zа-яА-Я\s\-']+$/.test(value)) {
                return 'Пожалуйста, введите корректное данные';
            }
            return true;
        },
            allowBlank: true
        },
        {
            fieldLabel: 'Фамилия',
            name: 'surname',
            id: 'surnameId',
            validator: function(value) {
            if (!/^[a-zA-Zа-яА-Я\s\-']+$/.test(value)) {
                return 'Пожалуйста, введите корректное данные';
            }
            return true;
        }
            //allowBlank: false
        },
        {
            fieldLabel: 'Почта',
            name: 'email',
            id: 'emailId',
            vtype: 'email',
            vtypeText: 'Неверный формат email',
            validator: function(value) {
            if (!/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/.test(value)) {
                return false;
            }
            return true;
            }
            //allowBlank: false
        },
        {
            xtype: 'datefield',
            format:'d.m.Y',
            fieldLabel: '<label for="date" data-field="date">Дата рождения</label>',
            name: 'birthday',
            id: 'birthdayId',
            maxValue: new Date()
        },
        {
            fieldLabel: 'Уровень образования',
            name: 'education',
            id: 'educationId',
            emptyText: 'Выберите',
            xtype:'combo',
            store:storeEducation,
            displayField:'name',
            valueField: 'id'
        },
        {
            fieldLabel: 'Получаю образование данного уровня',
            name: 'level',
            id: 'levelId',
            emptyText: 'Выберите',
            xtype:'combo',
            store: Ext.create('Ext.data.Store', {
                fields: ['value','time'],
                data: [
                   {
                   "time": "Впервые",
                   "value": 1
                   },
                   {
                   "time": "Нет",
                   "value": 2
                   }
             
                ]
            }),
            displayField:'time',
            valueField: 'value'
             
        },
        {
            fieldLabel: 'Пол',
            name: 'gender',
            id: 'genderId',
            emptyText: 'Выберите',
            xtype:'combo',
            store: Ext.create('Ext.data.Store', {
                fields: ['value','gender'],
                data: [
                   {
                   "gender": "Мужской",
                   "value": 1
                   },
                   {
                   "gender": "Женский",
                   "value": 2
                   }
             
                ]
            }),
            displayField:'gender',
            valueField: 'value'
        },
        {
           fieldLabel: 'Гражданство',
           name: 'nationality',
           id: 'nationalityId',
           emptyText: 'Выберите',
           xtype: 'combo',
           store: storeCountries,
           displayField: 'name',
           valueField: 'id'
        },
        {
            fieldLabel: 'Место рождения',
            name: 'place',
            id: 'placeId',
            validator: function(value) {
            if (!/^[a-zA-Zа-яА-Я\s\-']+$/.test(value)) {
                return 'Пожалуйста, введите корректное данные';
            }
            return true;
            }
        },
        {
            fieldLabel: 'Тип паспорта',
            name: 'passport_type',
            id: 'passport_typeId',
            emptyText: 'Выберите',
            xtype:'combo',
            store: Ext.create('Ext.data.Store', {
                fields: ['value','passport'],
                data: [
                   {
                   "passport": "Паспорт гражданина Российской Федерации",
                   "value": 1
                   },
                   {
                   "passport": "Паспорт гражданина другого государства",
                   "value": 2
                   }
             
                ]
            }),
            displayField:'passport',
            valueField: 'value'
        },
        {
            fieldLabel: 'Серия документа',
            name: 'document_series',
            id: 'document_seriesId',
            maxLength: 4,
            minLength:4,
            //maskRe: /[\d]/ //только цифры
            validator: function(value) {
                if (isNaN(value)) {
                    return 'Пожалуйста, введите числовое значение для возраста';
                }
            return true;  
            }
        },
        {
            fieldLabel: 'Номер паспорта',
            name: 'passport_number',
            id: 'passport_numberId',
            maxLength: 6,
            minLength: 6,
            validator: function(value) {
                if (isNaN(value)) {
                    return 'Пожалуйста, введите числовое значение для возраста';
                }
            return true;  
            }
        },
        {
             
            xtype: 'datefield',
            fieldLabel: '<label for="date" data-field="date">Когда выдан</label>',
            name: 'when_issued',
            id: 'when_issiedId',
            format:'d.m.Y',
            maxValue: new Date()
        },
        {
            fieldLabel: 'Кем выдан',
            name: 'who_issued',
            id: 'who_issuedId',
            validator: function(value) {
            if (!/^[a-zA-Zа-яА-Я\s\-']+$/.test(value)) {
                return 'Пожалуйста, введите корректное данные';
            }
            return true;
            }
        },
        {
            fieldLabel: 'Место выдачи',
            name: 'place_issued',
            id: 'place_issuedId',
            validator: function(value) {
            if (!/^[a-zA-Zа-яА-Я\s\-']+$/.test(value)) {
                return 'Пожалуйста, введите корректное данные';
            }
            return true;
            }
        },
        {
            fieldLabel: 'СНИЛС',
            name: 'snils',
            id: 'snilsId',
            regex: /^\d{3}-\d{3}-\d{3} \d{2}$/,
            regexText: 'Введите СНИЛС в формате XXX-XXX-XXX XX',
            maxLength: 14,  
            minLength: 14,
            maskRe: /[0-9\s-]/
        },
        {
            fieldLabel: 'Причина отсутствия СНИЛС',
            name: 'lack_snils',
            id: 'lack_snilsId',
            emptyText: 'Выберите',
            xtype:'combo',
            store: Ext.create('Ext.data.Store', {
                fields: ['value','cause'],
                data: [
                   {
                   "cause": "Гражданин иностранного государства",
                   "value": 1
                   },
                   {
                   "cause": "Нет",
                   "value": 2
                   }
             
                ]
            }),
            displayField:'cause',
            valueField: 'value'
        },
        {
            fieldLabel: 'Домашний телефон',
            name: 'home_phone_number',
            id: 'home_phone_numberId',
            maxLength:18,
            minLength:15,
            maskRe: /[0-9-\(\)+]/
        },
        {
            fieldLabel: 'Мобильный телефон',
            name: 'phone_number',
            id: 'phone_numberId',
            maxLength:18,
            minLength:15,
            maskRe: /[0-9-\(\)+]/
        }
    ],

    // buttons
    buttons: [ 
    {
        text: 'Сохранить',
        handler: function() {
            var form = this.up('form').getForm();
            var values = form.getValues();
            Ext.Ajax.request({
            url: '/index/insert-general-data',
            //method: 'GET', 
            params: {
               first_name:  values['first_name'],
               second_name:  values['second_name'],
               surname:  values['surname'],
               email: values['email'],
               birthday: values['birthday'],
               education: values ['education'],
               level: values['level'],
               gender: values['gender'],
               nationality: values['nationality'],
               place: values['place'],
               passport_type: values['passport_type'],
               document_series: values['document_series'],
               passport_number: values['passport_number'],
               when_issued: values['when_issued'],
               who_issued: values['who_issued'],
               place_issued: values['place_issued'],
               snils: values['snils'],
               lack_snils: values['lack_snils'],
               home_phone_number: values['home_phone_number'],
               phone_number: values['phone_number']
            },
            
            
            success: function(response){
                Window.hide();
                var id = Ext.decode(response.responseText).id;  // Получение id из полученного ответа
                Ext.getCmp('person_id_field').setValue(id);
                //console.log('Полученное значение id:', id);
                Ext.getCmp('form1').getForm().reset();
                //this.up('forml').getForm().reset();
                storeUsers.reload(); 
            },
             

            failure: function(){
                
            // Обработка ошибок
           }
          });   
        }
       
     },
     {
          text: 'Отмена',
        handler: function(){
            Window.hide();
            this.up('form').getForm().reset();
        }
     }
 ]
});
 
//форма места регистрации 
var FormRegist = new Ext.FormPanel({
    id: 'FormRegist',
    title: '',
    bodyPadding: 5,
    height: 600,
    width: 500,
    autoScroll:true,
    //url: 'save-form.php',
    //layout: 'anchor',
    defaults: {
        anchor: '95%',
        labelWidth: 200
    },
    defaultType: 'textfield',
    items: [
//        {
//            fieldLabel: 'Зарегистирирован в России',
//            name: 'reg_in_russia',
//            id: 'reg_in_russiaId',
//            emptyText: 'Выберите',
//            xtype:'combo',
//            store: Ext.create('Ext.data.Store', {
//                fields: ['value','level'],
//                data: [
//                   {
//                   "level": "Да",
//                   "value": 1
//                   },
//                   {
//                   "level": "Нет",
//                   "value": 2
//                   }
//                ]
//            }),
//            displayField:'level',
//            valueField: 'value'
//        },
        {
            fieldLabel: 'Регион',
            name: 'region',
            id: 'regionID',
            emptyText: 'Выберите',
            xtype:'combo',
            store:storeRegion,
            displayField:'name',
            valueField: 'reg_code'
             
        },
        {
            fieldLabel: 'Город',
            name: 'city',
            id: 'cityID',
            emptyText: 'Выберите',
            xtype:'combo',
            queryMode:'local',
            store:storeCity,
            displayField:'name',
            valueField: 'city_code',
            listeners: {
                expand: function() {
               // console.log(Ext.getCmp('cityID').getValue());
                storeCity.load({
                params: {
                    region_id: Ext.getCmp('regionID').getValue()
                }
                });
                }
            }
            //allowBlank: false
        },
        {
            fieldLabel: 'Улица',
            name: 'street',
            id: 'streetID',
            emptyText: 'Выберите',
            xtype:'combo',
            queryMode:'local',
            store: storeStreet,
            displayField:'name',
            valueField: 'street_code',
            listeners: {
                expand: function() {
                //console.log(Ext.getCmp('cityID').getValue());
                storeStreet.load({
                params: {
                    city_code: Ext.getCmp('cityID').getValue()
                }
                });
                }
            }
            //allowBlank: false
        },
        {
            fieldLabel: 'Улицы нет в списке',
            name: 'no_street',
            id: 'no_streetId',
            emptyText: 'Выберите',
            xtype:'combo',
            store: Ext.create('Ext.data.Store', {
                fields: ['value','level'],
                data: [
                   {
                   "level": "Да",
                   "value": 1
                   },
                   {
                   "level": "Нет",
                   "value": 2
                   }
                ]
            }),
            displayField:'level',
            valueField: 'value'
            //allowBlank: false
        },
        {
            fieldLabel: 'Дом',
            name: 'number_of_house',
            id: 'number_of_houseId'
            //allowBlank: false
        },
        {
            fieldLabel: 'Корпус',
            name: 'frame',
            id: 'frameId'
            //allowBlank: false
        },
        {
            fieldLabel: 'Квартира',
            name: 'apartment',
            id: 'apartmentId'
            //allowBlank: false
        },

        {
            fieldLabel: 'Индекс',
            name: 'index',
            id: 'indexId',
            maxLength: 6,  
            minLength: 6,
            maskRe: /[\d]/ 
            //allowBlank: false
        }
    ],
   
    // buttons
    buttons: [ 
    {
        text: 'Сохранить',
        handler: function() {
            
            var selectedPersonId = Ext.getCmp('person_id_field').getValue();  
            var form = this.up('form').getForm();
            var values = form.getValues();
            Ext.Ajax.request({
            url: '/index/update-place-data',
            params: {
               person_id: selectedPersonId,
               reg_in_russia:  values['reg_in_russia'],
               region: values['region'],
               street: values['street'],
               city: values['city'],
               no_street: values['no_street'],
               number_of_house: values ['number_of_house'],
               frame: values['frame'],
               apartment: values ['apartment'],
               index: values ['index']
            },
            
            
            success: function(){
                WindowRegist.hide();
                //var id = Ext.decode(response.responseText).id;  // Получение id из полученного ответа
               // Ext.getCmp('person_id_field').setValue(id);
                Ext.getCmp('FormRegist').getForm().reset();
//               // console.log(Ext.getCmp('person_id_field').getValue());
                //this.up('form').getForm().reset();
                storeUsers.reload();
            },
            failure: function(){
              // Данные об ошибке 
            }
            });
                
        }
       
     },
     {
        text: 'Отмена',
        handler: function(){
            WindowRegist.hide();
            Ext.getCmp('FormRegist').getForm().reset();
           // this.up('FormRegist').getForm().reset();
        }
     }
 ]
});
 
// Форма для образования
var FormEducation = new Ext.FormPanel({
    id: 'formEducation',
    title: 'Образование',
    bodyPadding: 5,
    height: 700,
    width: 700,
    autoScroll: true,
    defaults: {
        anchor: '95%',
        labelWidth: 200
    },
    defaultType: 'textfield',
    items: [
        {
           fieldLabel: 'Тип полученного образования',
           name: 'type_of_education',
           id: 'type_of_educationID',
           emptyText: 'Выберите',
           xtype: 'combo',
           store: storeEducationType,
           displayField: 'name',
           valueField: 'id'
        },
        {
            fieldLabel: 'Образовательное учреждение в России',
            name: 'education_in',
            id: 'education_inID',
            emptyText: 'Выберите',
            xtype:'combo',
            store: Ext.create('Ext.data.Store', {
                fields: ['value','time'],
                data: [
                   {
                   "time": "Да",
                   "value": 1
                   },
                   {
                   "time": "Нет",
                   "value": 2
                   }
             
                ]
            }),
            displayField:'time',
            valueField: 'value'
             
        
            //allowBlank: false
        },
        {
            fieldLabel: 'Регион',
            name: 'region1',
            id: 'regionID1',
            emptyText: 'Выберите',
            xtype:'combo',
            store:storeRegion,
            displayField:'name',
            valueField: 'reg_code'
            //allowBlank: false
        },
        {
            fieldLabel: 'Город',
            name: 'city1',
            id: 'cityId1',
            emptyText: 'Выберите',
            xtype:'combo',
            store:storeCity,
            queryMode:'local',
            displayField:'name',
            valueField: 'city_code',
            listeners: {
                expand: function() {
                storeCity.load({
                params: {
                    region_id: Ext.getCmp('regionID1').getValue()
                }
                });
            }
            }
            //allowBlank: false
        },
        {
            fieldLabel: 'Тип образовательного учреждения',
            name: 'type_institutions',
            id: 'type_institutionsID',
            emptyText: 'Выберите',
            xtype:'combo',
            store:storeEdinstitution,
            displayField:'name',
            valueField: 'id'
            
        },
        {
            fieldLabel: 'Номер образовательного учреждения (нуль, если нет номера)',
            name: 'number',
            id: 'numberId',
            allowBlank: false, // запретить пустой ввод
            validator: function(value) {
                if (isNaN(value)) {
                    return 'Пожалуйста, введите числовое значение';
                }
            return true;  
            }
        },
        {
            fieldLabel: 'Название образовательного учреждения',
            name: 'name_institutions',
            id: 'name_institutionsId'
        },
        {
            fieldLabel: 'Тип документа об образовании',
            name: 'type_document',
            id: 'type_documentId',
            emptyText: 'Выберите',
            xtype:'combo',
            store:storeEducationDocumentType,
            displayField:'name',
            valueField: 'id'
        },
        {
           fieldLabel: 'Серия документа об образовании',
           name: 'document_seriesE',
           id: 'document_seriesEId',
           validator: function(value) {
                if (isNaN(value)) {
                    return 'Пожалуйста, введите числовое значение';
                }
            return true;  
            }
        },
        {
            fieldLabel: 'Номер документа об обраовании',
            name: 'document_numberE',
            id: 'document_numberEId',
            validator: function(value) {
                if (isNaN(value)) {
                    return 'Пожалуйста, введите числовое значение';
                }
            return true;  
            }
        },
        {
            fieldLabel: 'Серия приложения к документу об образовании',
            name: 'application_series',
            id: 'application_seriesId',
            validator: function(value) {
                if (isNaN(value)) {
                    return 'Пожалуйста, введите числовое значение';
                }
            return true;  
            }
        },
        {
            fieldLabel: 'Номер приложения к документу об образовании',
            name: 'application_number',
            id: 'application_numberId',
            validator: function(value) {
                if (isNaN(value)) {
                    return 'Пожалуйста, введите числовое значение';
                }
            return true;  
            }
        },
        {
            fieldLabel: 'Организация, выдавшая документ об образовании',
            name: 'organization',
            id: 'organizationId'
        },
        {
             
            xtype: 'datefield',
            fieldLabel: '<label for="date" data-field="date">Дата выдачи документа об образовании</label>',
            name: 'when_document',
            id: 'when_documentId',
            format:'d.m.Y',
            maxValue: new Date()
        },
        {
            fieldLabel: 'Год выдачи документа об образовании',
            name: 'year_document',
            id: 'year_documentId',
            emptyText: 'Выберите',
            xtype:'combo',
            store:storeYear,
            displayField:'name',
            valueField: 'id'
        }
       
    ],

    // buttons
    buttons: [ 
    {
        text: 'Сохранить',
        handler: function() {
            var selectedPersonId = Ext.getCmp('person_id_field').getValue();  
            var form = this.up('form').getForm();
            var values = form.getValues();
            Ext.Ajax.request({
            url: '/index/update-education-data',  
            params: {
               person_id: selectedPersonId,
               type_of_education: values['type_of_education'],
               education_in:  values['education_in'],
               region:  values['region1'],
               city: values['city1'],
               type_institutions: values['type_institutions'],
               number: values ['number'],
               name_institutions: values['name_institutions'],
               type_document: values['type_document'],
               document_seriesE: values['document_seriesE'],
               document_numberE: values['document_numberE'],
               application_series: values['application_series'],
               application_number: values['application_number'],
               organization: values['organization'],
               when_document: values['when_document'],
               year_document: values['year_document']
            },
            
             success: function(){
                WindowEducation.hide();
                Ext.getCmp('formEducation').getForm().reset();
//                //console.log(Ext.getCmp('person_id_field').getValue());
                //this.up('form').getForm().reset();
                
                //this.up('form').getForm().reset();
                storeUsers.reload();
            },
            failure: function(){
              // Данные об ошибке 
            }
            });
                
        }
       
     },
     {
        text: 'Отмена',
        handler: function(){
            WindowEducation.hide();
             Ext.getCmp('formEducation').getForm().reset();
            //this.up('form').getForm().reset();
        }
     }
 ]
});

var FormEge = new Ext.FormPanel({
    id: 'FormEge',
    title: '',
    bodyPadding: 5,
    height: 50,
    width: 300,
    autoScroll:true,
    defaults: {
        anchor: '95%',
        labelWidth: 200
    },
    defaultType: 'textfield',
    items: [
        {
            fieldLabel: 'Тип экзамена',
            name: 'type_exam',
            id: 'type_examId',
            emptyText: 'Выберите',
            xtype: 'combo',
            store: storeExamType,
            displayField: 'name',
            valueField: 'id'


        },
        {
            fieldLabel: 'Предмет',
            name: 'subject',
            id: 'subjectID',
            emptyText: 'Выберите',
            xtype: 'combo',
            store: storeSubject,
            displayField: 'name',
            valueField: 'id'
            //allowBlank: false
        },
         {
            fieldLabel: 'Оценка',
            name: 'exam_mark',
            id: 'exam_markId',
            maxLength: 3,  
            maskRe: /[0-9\s-]/
            //allowBlank: false
        },
        {
            fieldLabel: 'Год сдачи экзамена',
            name: 'exam_year',
            id: 'exam_yearId',
            emptyText: 'Выберите',
            xtype:'combo',
            store:storeYear,
            displayField:'name',
            valueField: 'id'
        }
    ],

    // buttons
    buttons: [ 
    {
        text: 'Сохранить',
        handler: function() {
            var selectedPersonId = Ext.getCmp('person_id_field').getValue();
            var form = this.up('form').getForm();
            var values = form.getValues();
            Ext.Ajax.request({
            url: '/index/insert-ege-data',
            params: {
               person_id: selectedPersonId,
               type_exam:  values['type_exam'],
               subject:  values['subject'],
               exam_mark: values['exam_mark'],
               exam_year: values['exam_year']
            },
            
            
            success: function(){
                WindowEgeSubject.hide();
                 Ext.getCmp('FormEge').getForm().reset();
                //console.log(Ext.getCmp('person_id_field').getValue());
                //this.up('form').getForm().reset();
                //storeEge.reload();
                storeEge.load({
                params: {
                    person_id: selectedPersonId
                }
                });
            },
            failure: function(){
              // Данные об ошибке 
            }
            });
                
        }
       
     },
     {
        text: 'Отмена',
        handler: function(){
            WindowEgeSubject.hide();
            Ext.getCmp('FormEge').getForm().reset();
            //this.up('form').getForm().reset();
        }
     }
 ]
});

// FormKE
var FormKE = new Ext.FormPanel({
    id: 'FormKE',
    title: 'Добавление',
    bodyPadding: 5,
    autoScroll:true,
    width: 800,
    height: 400,
    defaults: {
        anchor: '95%',
        labelWidth: 200
    },
    defaultType: 'textfield',
    items: [
        {
            fieldLabel: 'ОСП',
            name: 'osp',
            id: 'ospId',
            emptyText: 'Выберите',
            xtype: 'combo',
            store: storeOSP,  
            displayField: 'name',
            valueField: 'id'
        },
        {
            fieldLabel: 'Специальность',
            name: 'specialization',
            id: 'specializationId',
            emptyText: 'Выберите',
            xtype: 'combo',
            queryMode:'local',
            store: storespecialization,  
            displayField: 'name',
            valueField: 'id',
            listeners: {
                expand: function() {
               // console.log(Ext.getCmp('cityID').getValue());
                storespecialization.load({
                params: {
                    osp_id: Ext.getCmp('ospId').getValue()
                }
                });
                }
            }
            
        },
        {
            fieldLabel: 'Институт',
            name: 'institute',
            id: 'instituteId',
            emptyText: 'Выберите',
            xtype: 'combo',
            store: storeSAE, // другое 
            displayField: 'name',
            valueField: 'sae_id',
            listeners: {
                expand: function() {
               // console.log(Ext.getCmp('cityID').getValue());
                storeSAE.load({
                params: {
                    specialization_id: Ext.getCmp('specializationId').getValue()
                }
                });
                }
            }
        },
        {
            fieldLabel: 'Профиль',
            name: 'profile',
            id: 'profileId',
            emptyText: 'Выберите',
            xtype: 'combo',
            store: storeprofile,  
            displayField: 'name',
            valueField: 'profile_id',
            listeners: {
                expand: function() {
                //console.log(Ext.getCmp('profileId').getValue());
                storeprofile.load({
                params: {
                    osp_id: Ext.getCmp('ospId').getValue(),
                    specialization_id: Ext.getCmp('specializationId').getValue(),
                    sae_id: Ext.getCmp('instituteId').getValue()
                }
                });
                }
            }
        },
        {
            fieldLabel: 'Форма обучения',
            name: 'form_education',
            id: 'form_educationID',
            emptyText: 'Выберите',
            xtype: 'combo',
            store: storeformeducation,
            displayField: 'name',
            valueField: 'form_education_id',
            listeners: {
                expand: function() {
                //console.log(Ext.getCmp('form_educationID').getValue());
                storeformeducation.load({
                params: {
                    osp_id: Ext.getCmp('ospId').getValue(),
                    specialization_id: Ext.getCmp('specializationId').getValue(),
                    sae_id: Ext.getCmp('instituteId').getValue(),
                    profile_id: Ext.getCmp('profileId').getValue()
                     
                }
                });
                }
            }
            //allowBlank: false
        },
         {
            fieldLabel: 'Форма оплаты',
            name: 'form_pay',
            id: 'form_payId',
            emptyText: 'Выберите',
            xtype: 'combo',
            store: storeformeofpay,
            displayField: 'name',
            valueField: 'form_payment_id',
            listeners: {
                expand: function() {
                //console.log(Ext.getCmp('instituteId').getValue());
                storeformeofpay.load({
                params: {
                    osp_id: Ext.getCmp('ospId').getValue(),
                    specialization_id: Ext.getCmp('specializationId').getValue(),
                    sae_id: Ext.getCmp('instituteId').getValue(),
                    profile_id: Ext.getCmp('profileId').getValue()
                     
                }
                });
                }
            }
            //allowBlank: false
        },
        {
            fieldLabel: 'Общежитие',
            name: 'dormitory',
            id: 'dormitoryId',
            emptyText: 'Выберите',
            xtype:'combo',
            store: Ext.create('Ext.data.Store', {
                fields: ['value','dormit'],
                data: [
                   {
                   "dormit": "Нуждаюсь",
                   "value": 1
                   },
                   {
                   "dormit": "Не нуждаюсь",
                   "value": 2
                   }
                  
                ]
            }),
            displayField:'dormit',
            valueField: 'value'
        },
        {
            xtype: 'datefield',
            format:'d.m.Y',
            anchor: '55%',
            fieldLabel: '<label for="date" data-field="date">Заявление подано</label>',
            name: 'application_submitted',
            id: 'application_submittedId',
            maxValue: new Date()
        },
        {
            fieldLabel: 'Приоритет',
            name: 'priorityke',
            id: 'prioritykeId',
            emptyText: 'Выберите',
            xtype:'combo',
            anchor: '55%',
            store: Ext.create('Ext.data.Store', {
                fields: ['value','prior'],
                data: [
                   {
                   "prior": "1",
                   "value": 1
                   },
                   {
                   "prior": "2",
                   "value": 2
                   },
                   {
                   "prior": "3",
                   "value": 3
                   },
                   {
                   "prior": "4",
                   "value": 4
                   },
                   {
                   "prior": "5",
                   "value": 5
                   },
                   {
                   "prior": "6",
                   "value": 6
                   },
                   {
                   "prior": "7",
                   "value": 7
                   },
                   {
                   "prior": "8",
                   "value": 8
                   },
                   {
                   "prior": "9",
                   "value": 9
                   }
                  
                ]
            }),
            displayField:'prior',
            valueField: 'value'
        }
    ],

    // buttons
    buttons: [ 
    {
        text: 'Сохранить',
        handler: function() {
            var selectedPersonId = Ext.getCmp('person_id_field').getValue();
            var form = this.up('form').getForm();
            var values = form.getValues();
            Ext.Ajax.request({
            url: '/index/insert-choosing-specialization-data',  
            params: {
               student_id: selectedPersonId,
               osp_id:  values['osp'],
               specialization_id:  values['specialization'],
               sae_id: values['institute'],
               profile_id: values['profile'],
               form_education_id: values['form_education'],
               form_payment_id: values['form_pay'],
               dormitory: values['dormitory'],
               statement_date: values['application_submitted'],
               priority: values['priorityke']
            },
            
            
            success: function(){
                WindowKE.hide();
                Ext.getCmp('FormKE').getForm().reset();
                //console.log(Ext.getCmp('person_id_field').getValue());
                //this.up('form').getForm().reset();
                //storeEge.reload();
                storeChoosingSpec.load({ // другое 
                params: {
                    person_id: selectedPersonId
                }
                });
            },
            failure: function(){
              // Данные об ошибке 
            }
            });
                
        }
       
     },
     {
        text: 'Отмена',
        handler: function(){
            WindowKE.hide();
            Ext.getCmp('FormKE').getForm().reset();
            //this.up('form').getForm().reset();
        }
     }
 ]
});
 
// FormOSP
var FormOSP = new Ext.FormPanel({
    id: 'FormOSP',
    title: 'Добавление',
    bodyPadding: 5,
    autoScroll:true,
    width: 800,
    height: 400,
    defaults: {
        anchor: '95%',
        labelWidth: 200
    },
    defaultType: 'textfield',
    items: [
        {
            fieldLabel: 'Тип экзамена',
            name: 'type_exam_osp',
            id: 'type_exam_ospId',
            emptyText: 'Выберите',
            xtype: 'combo',
            store: storeExamType,  
            displayField: 'name',
            valueField: 'id'
        },
        {
            fieldLabel: 'Предмет',
            name: 'subject_osp',
            id: 'subject_ospId',
            emptyText: 'Выберите',
            xtype: 'combo',
            store: storeSubject,  
            displayField: 'name',
            valueField: 'id'
        },
        {
            fieldLabel: 'Дата',
            xtype: 'datefield',
            value: new Date(),
            format:'d.m.Y',
            anchor: '55%',
            name: 'date_osp',
            id: 'date_ospId',
            maxValue: new Date()
        },
        {
            xtype: 'timefield',
            fieldLabel: 'Время',
            name: 'time_osp',
            id: 'time_ospId',
            emptyText: 'Выберите',
            minValue: '00:00',
            maxValue: '23:59',
            increment: 30, // шаг во времени
            format: 'H:i'
        },
        {
            fieldLabel: 'Аудитория',
            name: 'lecture_hall_osp',
            id: 'lecture_hall_ospId'
        },
        {
            fieldLabel: 'Оценка',
            name: 'mark_osp',
            id: 'mark_ospID',
            maxLength: 3,  
            maskRe: /[0-9\s-]/
            //allowBlank: false
        }           
    ],

    // buttons
    buttons: [ 
    {
        text: 'Сохранить',
        handler: function() {
            var selectedPersonId = Ext.getCmp('person_id_field').getValue();
            var form = this.up('form').getForm();
            var values = form.getValues();
            Ext.Ajax.request({
            url: '/index/insert-exam-osp-data', 
            params: {
               student_id: selectedPersonId,
               exam_type_id:  values['type_exam_osp'],
               subject_id:  values['subject_osp'],
               date: values['date_osp'],
               time: values['time_osp'],
               auditorium: values['lecture_hall_osp'],
               mark: values['mark_osp']
            },
            
            
            success: function(){
                WindowOSP.hide();
                Ext.getCmp('FormOSP').getForm().reset();
                //console.log(Ext.getCmp('person_id_field').getValue());
                storeExamsOsp.load({  
                params: {
                    person_id: selectedPersonId
                }
                });
            },
            failure: function(){
              // Данные об ошибке 
            }
            });
                
        }
       
     },
     {
        text: 'Отмена',
        handler: function(){
            WindowOSP.hide();
            Ext.getCmp('FormOSP').getForm().reset();
            //this.up('form').getForm().reset();
        }
     }
 ]
});

// FormSubmissionDocuments форма для подачи документов 
var FormSubmissionDocuments = new Ext.FormPanel({
    id: 'FormSubmissionDocuments',
    title: 'Подача документов',
    bodyPadding: 5,
    autoScroll:true,
    width: 800,
    height: 400,
    defaults: {
        anchor: '85%',
        labelWidth: 200
    },
    defaultType: 'textfield',
    items: [
        {
            fieldLabel: 'Статус документов',
            name: 'status_document',
            id: 'status_documentId',
            emptyText: 'Выберите',
            xtype: 'combo',
            store: storeExamType,  
            displayField: 'name',
            valueField: 'id'
        },
        {
            fieldLabel: 'Оригинал в вузе',
            name: 'original_university',
            id: 'original_universityId',
            emptyText: 'Выберите',
            xtype: 'combo',
            store: Ext.create('Ext.data.Store', {
                fields: ['value','answer'],
                data: [
                   {
                   "answer": "Да",
                   "value": 1
                   },
                   {
                   "answer": "Нет",
                   "value": 2
                   }
                  
                ]
            }),
            displayField:'answer',
            valueField: 'value'
        },
        {
            fieldLabel: 'Оригинал с ЕПГУ',
            name: 'original_EPGU',
            id: 'original_EPGUId',
            emptyText: 'Выберите',
            xtype: 'combo',
            store: Ext.create('Ext.data.Store', {
                fields: ['value','answer1'],
                data: [
                   {
                   "answer1": "Да",
                   "value": 1
                   },
                   {
                   "answer1": "Нет",
                   "value": 2
                   }
                  
                ]
            }),
            displayField:'answer1',
            valueField: 'value'
        },
        {
            fieldLabel: 'Временный студенческий',
            name: 'temporary_student_loan',
            id: 'temporary_student_loanId',
            emptyText: 'Выберите',
            xtype: 'combo',
            store: Ext.create('Ext.data.Store', {
                fields: ['value','student_loan'],
                data: [
                   {
                   "student_loan": "Да",
                   "value": 1
                   },
                   {
                   "student_loan": "Нет",
                   "value": 2
                   }
                  
                ]
            }),
            displayField:'student_loan',
            valueField: 'value'
        },
        {
            xtype: 'filefield',
            name: 'file',
            id: 'fileId',
            fieldLabel: 'Выберите файл',
            msgTarget: 'side', //  определяет, куда будет отображаться сообщение об ошибке валидации поля. Значение 'side' указывает на то, что сообщение будет отображаться рядом с полем. 
            allowBlank: false, // поле не может быть пустым 
            buttonText: 'Обзор'
        }
        
    ],

    // buttons
    buttons: [ 
      {
       text: 'Загрузить',
       handler: function() {
          var form = this.up('FormSubmissionDocuments').getForm();
          if (form.isValid()) {
            form.submit({
            url: 'upload.php',  //  наш путь указать 
            waitMsg: 'Загрузка файла...',
            success: function(form, action) {
               Ext.Msg.alert('Успешно', 'Файл успешно загружен');
            },
            failure: function(form, action) {
               Ext.Msg.alert('Ошибка', action.result.msg);
            }
        });
        }
    }
    },
    {
        text: 'Сохранить',
        handler: function() {
            var selectedPersonId = Ext.getCmp('person_id_field').getValue();
            var form = this.up('form').getForm();
            var values = form.getValues();
            Ext.Ajax.request({
            url: '/index/insert-exam-osp-data', 
            params: {
               student_id: selectedPersonId,
               status_document:  values['status_document'],
               original_EPGU:  values['original_EPGU'],
               temporary_student_loan: values['temporary_student_loan'],
               file: values['file']
               
            },
            
            
            success: function(){
                WindowSubmissionDocuments.hide();
                Ext.getCmp('FormSubmissionDocuments').getForm().reset();
                storeUsers.reload(); 
                //console.log(Ext.getCmp('person_id_field').getValue());
                //storeExamsOsp.load({  
               // params: {
               //     person_id: selectedPersonId
               // }
               // });
            },
            failure: function(){
              // Данные об ошибке 
            }
            });
                
        }
       
     },
     {
        text: 'Отмена',
        handler: function(){
            WindowSubmissionDocuments.hide();
            Ext.getCmp('FormSubmissionDocuments').getForm().reset();
            //this.up('form').getForm().reset();
        }
     }
 ]
});
//форма с олимпиадами
var FormOlimp = new Ext.FormPanel({
    id: 'FormOlimp',
    title: 'Добавление олимпиады',
    bodyPadding: 5,
    autoScroll:true,
    width: 800,
    height: 400,
    defaults: {
        anchor: '95%',
        labelWidth: 300
    },
    defaultType: 'textfield',
    items: [
        {
            fieldLabel: 'Год проведения олимпиады',
            name: 'year_olimp',
            id: 'year_olimpId',
            emptyText: 'Выберите',
            xtype: 'combo',
            store: storeExamType,  // другое 
            displayField: 'name',
            valueField: 'id'
        },

        {
            fieldLabel: 'Выберите олимпиаду',
            name: 'choose_olimp',
            id: 'choose_olimpId',
            emptyText: 'Выберите',
            xtype: 'combo',
            store: storeSubject,  
            displayField: 'name',
            valueField: 'id'
        },
        {
            fieldLabel: 'Степень диплома',
            name: 'degree_diploma',
            id: 'degree_diplomaId',
            emptyText: 'Выберите',
            xtype: 'combo',
            store: storeSubject,  
            displayField: 'name',
            valueField: 'id'
        },
        {
            xtype: 'textfield',
            fieldLabel: 'Регистрационный номер диплома',
            name: 'reg_number',
            id: 'reg_numberId'
        }

    ],



    // buttons
    buttons: [ 
    {
        text: 'Сохранить',
        handler: function() {
            var selectedPersonId = Ext.getCmp('person_id_field').getValue();
            var form = this.up('form').getForm();
            var values = form.getValues();
            Ext.Ajax.request({
            url: '/index/insert-special-rights-data',  
            params: {
               student_id: selectedPersonId,
               type_special_rights:  values['type_special_rights'],
               reason_special_rights:  values['reason_special_right'],
               document_name: values['document_special_right'],
               disability_series: values['document_series_right'],
               disability_number: values['passport_number_right'],
               disability_group: values['disability_group'],
               disability_date: values['date_document'],
               disability_organization: values['organization_right'],
               rehabilitation_card_number: values['passport_number_right_card'],
               rehabilitation_card_date: values['date_document_card'],
               rehabilitation_card_organization: values['organization_right_card']
            },
            
            
            success: function(){
                WindowOlimp.hide();
                Ext.getCmp('FormOlimp').getForm().reset();
                storeUsers.reload(); 
                
            },
            failure: function(){
              // Данные об ошибке 
            }
            });
                
        }
       
     },
     {
        text: 'Отмена',
        handler: function(){
            WindowOlimp.hide();
            Ext.getCmp('FormOlimp').getForm().reset();
            //this.up('form').getForm().reset();
        }
     }
 ]
});

var FormAddingIndividualAchievement = new Ext.FormPanel({
    id: 'FormAddingIndividualAchievement',
    title: 'Добавление индивидуального достижения',
    bodyPadding: 5,
    autoScroll:true,
    width: 800,
    height: 400,
    defaults: {
        anchor: '95%',
        labelWidth: 300
    },
    defaultType: 'textfield',
    items: [
        {
            fieldLabel: 'Выберите достижение',
            name: 'choose_achievement',
            id: 'choose_achievementId',
            emptyText: 'Выберите',
            xtype: 'combo',
            store: storeExamType, 
            displayField: 'name',
            valueField: 'id'
        },

        {
            fieldLabel: 'Примечание:',
            name: 'note_achievement',
            id: 'note_achievementId'
        }

    ],



    // buttons
    buttons: [ 
    {
        text: 'Сохранить',
        handler: function() {
            var selectedPersonId = Ext.getCmp('person_id_field').getValue();
            var form = this.up('form').getForm();
            var values = form.getValues();
            Ext.Ajax.request({
            url: '/index/insert-special-rights-data',  
            params: {
               student_id: selectedPersonId,
               type_special_rights:  values['type_special_rights'],
               reason_special_rights:  values['reason_special_right'],
               document_name: values['document_special_right'],
               disability_series: values['document_series_right'],
               disability_number: values['passport_number_right'],
               disability_group: values['disability_group'],
               disability_date: values['date_document'],
               disability_organization: values['organization_right'],
               rehabilitation_card_number: values['passport_number_right_card'],
               rehabilitation_card_date: values['date_document_card'],
               rehabilitation_card_organization: values['organization_right_card']
            },
            
            
            success: function(){
                WindowOlimp.hide();
                Ext.getCmp('FormOlimp').getForm().reset();
                storeUsers.reload(); 
                
            },
            failure: function(){
              // Данные об ошибке 
            }
            });
                
        }
       
     },
     {
        text: 'Отмена',
        handler: function(){
            WindowOlimp.hide();
            Ext.getCmp('FormOlimp').getForm().reset();
            //this.up('form').getForm().reset();
        }
     }
 ]
});

// окно достижение/индивидуальный достижения
var WindowAddingIndividualAchievement = Ext.create('Ext.window.Window', {
    height: 600,
    width: 1100,
    layout: 'fit',
    items: [
        FormAddingIndividualAchievement
    ],
    //closable:true,
    closeAction:'hide'       
});

// FormSpecialRights
var FormSpecialRights = new Ext.FormPanel({
    id: 'FormSpecialRights',
    title: 'Особые права',
    bodyPadding: 5,
    autoScroll:true,
    width: 800,
    height: 400,
    defaults: {
        anchor: '95%',
        labelWidth: 300
    },
    defaultType: 'textfield',
    items: [
        {
            fieldLabel: 'Тип особого права/преимущественного права',
            name: 'type_special_rights',
            id: 'type_special_rightsId',
            emptyText: 'Выберите',
            xtype: 'combo',
            store: storeSpecialRights, 
            displayField: 'name',
            valueField: 'id',
            listeners: {
              select: function(combo, record) {
                if (record.get('name') === 'Сирота/Инвалид/Ветеран') {
                  Ext.getCmp('reason_special_rightId').show(); // Показать поле с причиной
                } else {
                  Ext.getCmp('reason_special_rightId').hide();
                  Ext.getCmp('referenceId').hide();  
                  Ext.getCmp('document_special_right_disableId').hide(); 
                  Ext.getCmp('document_special_right_orphanId').hide(); 
                  Ext.getCmp('document_special_right_veteranId').hide(); 
                  Ext.getCmp('document_series_right_disableId').hide(); 
                  Ext.getCmp('document_series_right_orphanId').hide(); 
                  Ext.getCmp('document_series_right_veteranId').hide(); 
                  Ext.getCmp('passport_number_right_disableId').hide();
                  Ext.getCmp('passport_number_right_orphanId').hide(); 
                  Ext.getCmp('passport_number_right_veteranId').hide(); 
                  Ext.getCmp('disability_groupId').hide();
                  Ext.getCmp('date_document_disableId').hide();
                  Ext.getCmp('date_document_orphanId').hide();
                  Ext.getCmp('date_document_veteranId').hide();
                  Ext.getCmp('organization_right_disableId').hide();
                  Ext.getCmp('organization_right_orphanId').hide();
                  Ext.getCmp('organization_right_veteranId').hide();
                  Ext.getCmp('rehabilitation_cardId').hide();
                  Ext.getCmp('passport_number_right_cardId').hide();
                  Ext.getCmp('date_document_cardId').hide();
                  Ext.getCmp('orphanId').hide();
                  Ext.getCmp('organization_right_cardId').hide();// Скрыть поле с причиной
                }
             }
            }

           
        },
        {
            fieldLabel: 'Причина особого права',
            name: 'reason_special_right',
            id: 'reason_special_rightId',
            emptyText: 'Выберите',
            xtype: 'combo',
            store: storeReasonSpecialRights,  
            displayField: 'name',
            valueField: 'id',
            hidden: true, // Начально скрытое поле
            listeners: {
              select: function(combo, record) {
                if (record.get('name') === 'Инвалид') {
                  Ext.getCmp('referenceId').show();  
                  Ext.getCmp('document_special_right_disableId').show(); 
                  Ext.getCmp('document_series_right_disableId').show(); 
                  Ext.getCmp('passport_number_right_disableId').show(); 
                  Ext.getCmp('disability_groupId').show();
                  Ext.getCmp('date_document_disableId').show();
                  Ext.getCmp('organization_right_disableId').show();
                  Ext.getCmp('rehabilitation_cardId').show();
                  Ext.getCmp('passport_number_right_cardId').show();
                  Ext.getCmp('date_document_cardId').show();
                  Ext.getCmp('organization_right_cardId').show();
                  
                  
                  Ext.getCmp('orphanId').hide(); // к сироте относится 
                  Ext.getCmp('document_special_right_orphanId').hide(); 
                  Ext.getCmp('document_series_right_orphanId').hide(); 
                  Ext.getCmp('passport_number_right_orphanId').hide(); 
                  Ext.getCmp('date_document_orphanId').hide();
                  Ext.getCmp('organization_right_orphanId').hide();
                } 
                if (record.get('name') === 'Сирота') {
                  Ext.getCmp('orphanId').show(); 
                  Ext.getCmp('document_special_right_orphanId').show(); 
                  Ext.getCmp('document_series_right_orphanId').show(); 
                  Ext.getCmp('passport_number_right_orphanId').show(); 
                  Ext.getCmp('date_document_orphanId').show();
                  Ext.getCmp('organization_right_orphanId').show();
                  
                  
                  Ext.getCmp('referenceId').hide(); // к инвалиду относится   
                  Ext.getCmp('document_special_right_disableId').hide(); 
                  Ext.getCmp('document_series_right_disableId').hide(); 
                  Ext.getCmp('passport_number_right_disableId').hide(); 
                  Ext.getCmp('disability_groupId').hide();
                  Ext.getCmp('date_document_disableId').hide();
                  Ext.getCmp('organization_right_disableId').hide();
                  Ext.getCmp('rehabilitation_cardId').hide();
                  Ext.getCmp('passport_number_right_cardId').hide();
                  Ext.getCmp('date_document_cardId').hide();
                  Ext.getCmp('organization_right_cardId').hide();
                   
                }  
             }
            }
        },
        {
            fieldLabel: 'Название документа, подтверждающего особое право',
            name: 'document_special_right_disable',
            id: 'document_special_right_disableId',
            hidden: true // Начально скрытое поле
        },
        {
            fieldLabel: 'Название документа, подтверждающего особое право',
            name: 'document_special_right_orphan',
            id: 'document_special_right_orphanId',
            hidden: true // Начально скрытое поле
        },
        {
            fieldLabel: 'Название документа, подтверждающего особое право',
            name: 'document_special_right_veteran',
            id: 'document_special_right_veteranId',
            hidden: true // Начально скрытое поле
        },
        {
            xtype: 'displayfield',
            fieldLabel: 'Справка об установлении сиротства',
            name: 'orphan',
            id: 'orphanId',
            labelWidth: 600,
            hidden: true // Начально скрытое поле
        },
        {
            xtype: 'displayfield',
            fieldLabel: 'Справка об установлении инвалидности',
            name: 'reference',
            id: 'referenceId',
            labelWidth: 600,
            fieldStyle: {
                'font-weight': 'bold'
            },
            hidden: true // Начально скрытое поле
        },
        {
            fieldLabel: 'Серия документа',
            name: 'document_series_right_disable',
            id: 'document_series_right_disableId',
            maxLength: 4,
            minLength:4,
            //maskRe: /[\d]/ //только цифры
            validator: function(value) {
                if (isNaN(value)) {
                    return 'Пожалуйста, введите числовое значение для возраста';
                }
            return true;  
            },
            hidden: true // Начально скрытое поле
        },
         {
            fieldLabel: 'Серия документа',
            name: 'document_series_right_orphan',
            id: 'document_series_right_orphanId',
            maxLength: 4,
            minLength:4,
            //maskRe: /[\d]/ //только цифры
            validator: function(value) {
                if (isNaN(value)) {
                    return 'Пожалуйста, введите числовое значение для возраста';
                }
            return true;  
            },
            hidden: true // Начально скрытое поле
        },
        {
            fieldLabel: 'Серия документа',
            name: 'document_series_right_veteran',
            id: 'document_series_right_veteranId',
            maxLength: 4,
            minLength:4,
            //maskRe: /[\d]/ //только цифры
            validator: function(value) {
                if (isNaN(value)) {
                    return 'Пожалуйста, введите числовое значение для возраста';
                }
            return true;  
            },
            hidden: true // Начально скрытое поле
        },
        
        {
            fieldLabel: 'Номер документа',
            name: 'passport_number_right_disable',
            id: 'passport_number_right_disableId',
            maxLength: 10,
            minLength: 4,
            validator: function(value) {
                if (isNaN(value)) {
                    return 'Пожалуйста, введите числовое значение для возраста';
                }
            return true;  
            },
            hidden: true // Начально скрытое поле
        },
         {
            fieldLabel: 'Номер документа',
            name: 'passport_number_right_orphan',
            id: 'passport_number_right_orphanId',
            maxLength: 10,
            minLength: 4,
            validator: function(value) {
                if (isNaN(value)) {
                    return 'Пожалуйста, введите числовое значение для возраста';
                }
            return true;  
            },
            hidden: true // Начально скрытое поле
        },
         {
            fieldLabel: 'Номер документа',
            name: 'passport_number_right_veteran',
            id: 'passport_number_right_veteranId',
            maxLength: 10,
            minLength: 4,
            validator: function(value) {
                if (isNaN(value)) {
                    return 'Пожалуйста, введите числовое значение для возраста';
                }
            return true;  
            },
            hidden: true // Начально скрытое поле
        },
        {
            fieldLabel: 'Группа инвалидности',
            name: 'disability_group',
            id: 'disability_groupId',
            emptyText: 'Выберите',
            xtype: 'combo',
            store:storeTypeSpecialRights,
            displayField: 'name',
            valueField: 'id',
            hidden: true // Начально скрытое поле
        },
        {
            fieldLabel: 'Дата выдачи документа',
            xtype: 'datefield',
            format:'d.m.Y',
            anchor: '70%',
            name: 'date_document_disable',
            id: 'date_document_disableId',
            maxValue: new Date(),
            hidden: true // Начально скрытое поле
        },
         {
            fieldLabel: 'Дата выдачи документа',
            xtype: 'datefield',
            format:'d.m.Y',
            anchor: '70%',
            name: 'date_document_orphan',
            id: 'date_document_orphanId',
            maxValue: new Date(),
            hidden: true // Начально скрытое поле
        },
         {
            fieldLabel: 'Дата выдачи документа',
            xtype: 'datefield',
            format:'d.m.Y',
            anchor: '70%',
            name: 'date_document_veteran',
            id: 'date_document_veteranId',
            maxValue: new Date(),
            hidden: true // Начально скрытое поле
        },
        {
            fieldLabel: 'Выдавшая организация',
            name: 'organization_right_disable',
            id: 'organization_right_disableId',
            hidden: true // Начально скрытое поле
        },
        {
            fieldLabel: 'Выдавшая организация',
            name: 'organization_right_orphan',
            id: 'organization_right_orphanId',
            hidden: true // Начально скрытое поле
        },
         {
            fieldLabel: 'Выдавшая организация',
            name: 'organization_right_veteran',
            id: 'organization_right_veteranId',
            hidden: true // Начально скрытое поле
        },
        {
            xtype: 'displayfield',
            fieldLabel: 'Реабилитационная карта',
            name: 'rehabilitation_card',
            id: 'rehabilitation_cardId',
            labelWidth: 600,
            fieldStyle: {
                'font-weight': 'bold'
            },
            hidden: true // Начально скрытое поле
        },
        {
            fieldLabel: 'Номер документа',
            name: 'passport_number_right_card',
            id: 'passport_number_right_cardId',
            maxLength: 10,
            minLength: 4,
            validator: function(value) {
                if (isNaN(value)) {
                    return 'Пожалуйста, введите числовое значение для возраста';
                }
            return true;  
            },
            hidden: true // Начально скрытое поле
        },
         {
            fieldLabel: 'Дата выдачи документа',
            xtype: 'datefield',
            format:'d.m.Y',
            anchor: '70%',
            name: 'date_document_card',
            id: 'date_document_cardId',
            maxValue: new Date(),
            hidden: true // Начально скрытое поле
        },
        {
            fieldLabel: 'Выдавшая организация',
            name: 'organization_right_card',
            id: 'organization_right_cardId',
            hidden: true // Начально скрытое поле
        }
    ],

    // buttons
    buttons: [ 
    {
        text: 'Сохранить',
        handler: function() {
            var selectedPersonId = Ext.getCmp('person_id_field').getValue();
            var form = this.up('form').getForm();
            var values = form.getValues();
            Ext.Ajax.request({
            url: '/index/insert-special-rights-data',  
            params: {
               student_id: selectedPersonId,
               type_special_rights:  values['type_special_rights'],
               reason_special_rights:  values['reason_special_right'],
               document_name_disable: values['document_special_right_disable'],
               document_name_orphan: values['document_special_right_orphan'],
               document_name_veteranf: values['document_special_right_veteran'],
               disability_series: values['document_series_right'],
               disability_number: values['passport_number_right'],
               disability_group: values['disability_group'],
               disability_date: values['date_document'],
               disability_organization: values['organization_right'],
               rehabilitation_card_number: values['passport_number_right_card'],
               rehabilitation_card_date: values['date_document_card'],
               rehabilitation_card_organization: values['organization_right_card']
            },
            
            
            success: function(){
                WindowSpecialRights.hide();
                Ext.getCmp('FormSpecialRights').getForm().reset();
                storeUsers.reload(); 
                
            },
            failure: function(){
              // Данные об ошибке 
            }
            });
                
        }
       
     },
     {
        text: 'Отмена',
        handler: function(){
            WindowSpecialRights.hide();
            Ext.getCmp('FormSpecialRights').getForm().reset();
            //this.up('form').getForm().reset();
        }
     }
 ]
});
 
//Форма для окна с кнопками 
var Formwin = new Ext.FormPanel({
    width: 350,
    height: 300,
    bodyPadding: 5,
    autoScroll: true,
    layout:{   // описание положения кнопок в окне 
        type:'vbox',
        align:'center',
        pack:'center'
    },
    defaultType: 'textfield',
    id: 'Formwin',
    defaults:{      //описание кнопок
        width:200,
        heigth:100,
        margin:'5 5 5 5'
    },
    items:[
        {
          xtype:'button',
          text: 'Общая информация',
          handler: function() 
          {
            Window.show();
             
          }
        },
        {
          xtype:'button',
          text: 'Место регистрации',
          handler: function() 
          {
            WindowRegist.show();
          }
        },
        {
          xtype:'button',
          text: 'Образование',
          handler: function() 
          {
            WindowEducation.show();
          }
        },
        {
          xtype:'button',
          text: 'ЕГЭ (средний балл)',
          handler: function() 
          {
            WindowEge.show();
          }
      },
        {
          xtype:'button',
          text: 'Заявление',
          handler: function() 
          {
            WindowStatement.show();
          }
        },
        {
          xtype:'button',
          text: 'Экзамены в ОСП',
          handler: function() 
          {
            WindowExams.show();
          }
        },
        {
          xtype:'button',
          text: 'Достижения',
          handler: function() 
          {
             WindowAchievement.show();
          }
        },
        {
          xtype:'button',
          text: 'Особые права',
          handler: function() 
          {
            WindowSpecialRights.show();
          }
        },
        {
          xtype:'button',
          text: 'Подача документов',
          handler: function() 
          {
            WindowSubmissionDocuments.show();
          }
        },
        {
            name: 'person_id_field',
            id: 'person_id_field',
            hidden: true
        }
        
    ],
    buttons: 
    [ 
         
        {
          text: 'Отмена',
          handler: function(){
          Win.hide();
          Ext.getCmp('Formwin').getForm().reset();
          }
        }
    ]    
});

// Окно с кнопками 
var Win = Ext.create('Ext.window.Window', {
    //title: 'Редактирование абитуриента',
    height: 500,
    width: 600,
    layout: 'fit',
    items: [Formwin],
    //closable:true,
    closeAction:'hide'
}) ;

// Общая информация
var Window = Ext.create('Ext.window.Window', {
    //title: 'Добавить',
    height: 600,
    width: 600,
    layout: 'fit',
    items: [Form],
    //closable:true,
    closeAction:'hide'       
}) ;

var WindowEducation = Ext.create('Ext.window.Window', {
    //title: 'Добавить',
    height: 600,
    width: 600,
    layout: 'fit',
    items: [FormEducation],
    //closable:true,
    closeAction:'hide'       
}) ;

var WindowRegist = Ext.create('Ext.window.Window', {
    title: 'Место регистрации',
    height: 600,
    width: 600,
    layout: 'fit',
    items: [FormRegist],
    //closable:true,
    closeAction:'hide'       
}) ;


var WindowEgeSubject= Ext.create('Ext.window.Window', {
    //title: 'Добавить',
    height: 280,
    width: 500,
    layout: 'fit',
    items: [FormEge],
    //closable:true,
    closeAction:'hide'       
}) ;


var gridEge = Ext.create('Ext.grid.Panel', {
    title: 'ЕГЭ средний балл',
    store: storeEge,
    id: 'grid-ege',
    layout: 'fit',
    autowith: true,
    tbar: [
    {
        text: 'Добавить',
        handler: function()
        {
            WindowEgeSubject.show();
        }
    },
    {
        text: 'Удалить',
        handler: function()
        {   
            //console.log(gridPanel.getSelection());
            if (gridEge.getSelection().length === 0) 
            {
                Ext.Msg.alert('','Выберите строку для удаления');   
            }
                
            else 
            {
                Ext.Msg.show({
                title:'',
                message: 'Вы точно хотите удалить выбранную строку?',
                buttons: Ext.Msg.YESNO,
                icon: Ext.Msg.QUESTION,
                fn: function(btn) {
                if (btn === 'yes') {
                    Ext.Ajax.request({
                    url: '/index/delete-ege-data',
                    params: {
                    id: gridEge.getSelection()[0].get('id')
                    },
                    success: function(){}
                    });
                    storeEge.reload();

                }
                
                } 
                });
                
            }
        }
         
    }
    ], 
    columns: [
        { 
            width: 250,
            header: 'Тип экзамена',
            dataIndex: 'type_exam_pass' 
        },
        {
           width: 250,
           header: 'Предмет',
           dataIndex: 'subject_pass'  
        },
        {
           width: 250,
           header: 'Балл по стобалльной шкале',
           dataIndex: 'mark' 
        },
        {
           width: 250,
           header: 'Год сдачи',
           dataIndex: 'year_pass' 
        },
 
        {
            hidden: true,
            header: 'Id',
            dataIndex: 'id'  
        }
    ]
    
});
// окно егэ 
var WindowEge = Ext.create('Ext.window.Window', {
    height: 600,
    width: 890,
    layout: 'fit',
    items: [gridEge],
    //closable:true,
    closeAction:'hide'       
}) ;
 
// окно для осп
var WindowOSP = Ext.create('Ext.window.Window', {
    height: 600,
    width: 1000,
    layout: 'fit',
    items: [FormOSP],
    //closable:true,
    closeAction:'hide'       
}) ;
// окно особые права
var WindowSpecialRights = Ext.create('Ext.window.Window', {
    height: 600,
    width: 1000,
    layout: 'fit',
    items: [FormSpecialRights],
    //closable:true,
    closeAction:'hide'       
}) ;
// окно для подачи документов
var WindowSubmissionDocuments = Ext.create('Ext.window.Window', {
    height: 600,
    width: 1000,
    layout: 'fit',
    items: [FormSubmissionDocuments],
    //closable:true,
    closeAction:'hide'       
}) ;
// панель для экзамены в осп
var gridExams = Ext.create('Ext.grid.Panel', {
    title: 'Экзамены в ОСП',
    store: storeExamsOsp,  
    id: 'grid-exams',
    layout: 'fit',
    autowith: true,
    tbar: [
    {
        text: 'Добавить',
        handler: function()
        {
            WindowOSP.show();
        }
    },
    {
        text: 'Удалить',
        handler: function()
        {   
            //console.log(gridPanel.getSelection());
            if (gridExams.getSelection().length === 0) 
            {
                Ext.Msg.alert('','Выберите строку для удаления');   
            }
                
            else 
            {
                Ext.Msg.show({
                title:'',
                message: 'Вы точно хотите удалить выбранную строку?',
                buttons: Ext.Msg.YESNO,
                icon: Ext.Msg.QUESTION,
                fn: function(btn) {
                if (btn === 'yes') {
                    Ext.Ajax.request({
                    url: '/index/delete-exam-osp-data',  
                    params: {
                    id: gridExams.getSelection()[0].get('id')
                    },
                    success: function(){}
                    });
                    
                    storeExamsOsp.reload();
                }
                
                } 
                });
                
            }
        }
         
    }
    ], 
    columns: [
        { 
            width: 250,
            header: 'Тип экзамена',
            dataIndex: 'exam_type'  
        },
        {
           width: 200,
           header: 'Предмет',
           dataIndex: 'subject'  
        },
        {
           width: 150,
           header: 'Дата',
           dataIndex: 'date' 
        },
        {
           width: 150,
           header: 'Время',
           dataIndex: 'time' 
        },
        {
           width: 200,
           header: 'Аудитория',
           dataIndex: 'auditorium' 
        },
        {
           width: 200,
           header: 'Оценка',
           dataIndex: 'mark' 
        },
        {
            hidden: true,
            header: 'Id',
            dataIndex: 'id'  
        }
    ]
    
});
// окно для экзамены в ОСП
var WindowExams = Ext.create('Ext.window.Window', {
    height: 600,
    width: 1200,
    layout: 'fit',
    items: [gridExams],
    //closable:true,
    closeAction:'hide'       
}) ;
 
// Окно для КЕ
var WindowKE = Ext.create('Ext.window.Window', {
    height: 600,
    width: 1000,
    layout: 'fit',
    items: [FormKE],
    //closable:true,
    closeAction:'hide'       
}) ;

// панель для заявления 
var gridStatement = Ext.create('Ext.grid.Panel', {
    title: 'Выбор конкурсных единиц',
    store: storeChoosingSpec,
    id: 'grid-statement',
    layout: 'fit',
    autowith: true,
    tbar: [
    {
        text: 'Добавить',
        handler: function()
        {
            WindowKE.show();
        }
    },
    {
        text: 'Удалить',
        handler: function()
        {   
            //console.log(gridPanel.getSelection());
            if (gridStatement.getSelection().length === 0) 
            {
                Ext.Msg.alert('','Выберите строку для удаления');   
            }
                
            else 
            {
                Ext.Msg.show({
                title:'',
                message: 'Вы точно хотите удалить выбранную строку?',
                buttons: Ext.Msg.YESNO,
                icon: Ext.Msg.QUESTION,
                fn: function(btn) {
                if (btn === 'yes') {
                    Ext.Ajax.request({
                    url: '/index/delete-choosing-specialization-data', 
                    params: {
                    id: gridStatement.getSelection()[0].get('id')
                    },
                    success: function(){}
                    });
                    storeChoosingSpec.reload();

                }
                //storeChoosingSpec.reload();
                } 
                });
                
            }
        }
         
    }
    ], 
    columns: [
        { 
            width: 150,
            header: 'Приоритет',
            dataIndex: 'priority' 
        },
        {
           width: 150,
           header: 'ОСП',
           dataIndex: 'osp'  
        },
        {
           width: 255,
           header: 'Специальности',
           dataIndex: 'specialization' 
        },
        {
           width: 255,
           header: 'Институт',
           dataIndex: 'sae' 
        },
        {
           width: 255,
           header: 'Профиль',
           dataIndex: 'profile' 
        },
        {
            hidden: true,
            header: 'Id',
            dataIndex: 'id'  
        }
    ]
    
});
// окно с заявлением 
var WindowStatement = Ext.create('Ext.window.Window', {
    height: 600,
    width: 1100,
    layout: 'fit',
    items: [gridStatement],
    //closable:true,
    closeAction:'hide'       
}); 
//окно с олимпиадами
var WindowOlimp = Ext.create('Ext.window.Window', {
    height: 600,
    width: 1100,
    layout: 'fit',
    items: [FormOlimp],
    //closable:true,
    closeAction:'hide'       
}); 

// панель достижений
var gridAchievement = Ext.create('Ext.grid.Panel', {
    title: 'Олимпиады',
    store: storeEge,
    id: 'grid-achievement',
    layout: 'fit',
    autowith: true,
    tbar: [
    {
        text: 'Добавить',
        handler: function()
        {
            WindowOlimp.show();
        }

    },
    {
        text: 'Удалить',
        handler: function()
        {   
            //console.log(gridPanel.getSelection());
            if (gridAchievement.getSelection().length === 0) 
            {
                Ext.Msg.alert('','Выберите строку для удаления');   
            }
                
            else 
            {
                Ext.Msg.show({
                title:'',
                message: 'Вы точно хотите удалить выбранную строку?',
                buttons: Ext.Msg.YESNO,
                icon: Ext.Msg.QUESTION,
                fn: function(btn) {
                if (btn === 'yes') {
                    Ext.Ajax.request({
                    url: '/index/delete-ege-data',
                    params: {
                    id: gridAchievement.getSelection()[0].get('id')
                    },
                    success: function(){}
                    });
                    storeEge.reload();

                }
                
                } 
                });
                
            }
        }
         
    }
    ], 
    columns: [
        { 
            width: 109,
            header: 'Номер',
            dataIndex: 'number_achievement' 
        },
        {
           width: 442,
           header: 'Название',
           dataIndex: 'name_achievement'  
        },
        {
           width: 109,
           header: 'Уровень',
           dataIndex: 'degree_achievement' 
        },
        {
           width: 109,
           header: 'Предмет',
           dataIndex: 'subject_achievement' 
        },
        {
           width: 109,
           header: 'Степень',
           dataIndex: 'subject_achievement' 
        },
        {
           width: 109,
           header: 'Год',
           dataIndex: 'subject_achievement' 
        },
        {
           width: 109,
           header: 'Рег.Номер',
           dataIndex: 'subject_achievement' 
        },
 
        {
            hidden: true,
            header: 'Id',
            dataIndex: 'id'  
        }
    ]
    
});

// панель индивидуальных достижений
var gridIndividualAchievements = Ext.create('Ext.grid.Panel', {
    title: 'Индивидуальные достижения',
    store: storeEge,
    id: 'grid-individual_achievement',
    layout: 'fit',
    autowith: true,
    tbar: [
    {
        text: 'Добавить',
        handler: function()
        {
            WindowAddingIndividualAchievement.show();
        }

    },
    {
        text: 'Удалить',
        handler: function()
        {   
            //console.log(gridPanel.getSelection());
            if (gridIndividualAchievements.getSelection().length === 0) 
            {
                Ext.Msg.alert('','Выберите строку для удаления');   
            }
                
            else 
            {
                Ext.Msg.show({
                title:'',
                message: 'Вы точно хотите удалить выбранную строку?',
                buttons: Ext.Msg.YESNO,
                icon: Ext.Msg.QUESTION,
                fn: function(btn) {
                if (btn === 'yes') {
                    Ext.Ajax.request({
                    url: '/index/delete-ege-data',
                    params: {
                    id: gridIndividualAchievements.getSelection()[0].get('id')
                    },
                    success: function(){}
                    });
                    storeEge.reload();

                }
                
                } 
                });
                
            }
        }
         
    },
    
    {
        text: 'Сочинение проверено',
        handler: function()
        {
            WindowOlimp.show();
        }

    }

    ], 
    columns: [
        { 
            width: 700,
            header: 'Индивидуальное достижение',
            dataIndex: 'number_achievement' 
        },
        {
           width: 100,
           header: 'Баллы',
           dataIndex: 'name_achievement'  
        },
        {
           width: 300,
           header: 'Примечание',
           dataIndex: 'degree_achievement' 
        },
 
        {
            hidden: true,
            header: 'Id',
            dataIndex: 'id'  
        }
    ]
    
});

// окно достижение/индивидуальный достижения
var WindowAchievement = Ext.create('Ext.window.Window', {
    height: 600,
    width: 1100,
    layout: 'vbox',
    items: [
        gridAchievement,
        gridIndividualAchievements
    ],
    //closable:true,
    closeAction:'hide'       
});



var gridPanel = Ext.create('Ext.grid.Panel',{
    title: 'Пользователи',
    store: storeUsers,
    id: 'grid-panel',
    layout: 'fit',
    autowith: true,
    //width: '100%',
    //height: '100%',
    // renderTo: Ext.getBody(),
    tbar: [
    {
        text: 'Добавить',
        handler: function()
        {
            Win.show();
        }
    },
    {
        text: 'Удалить',
        handler: function()
        {   
            //console.log(gridPanel.getSelection());
            if (gridPanel.getSelection().length === 0) 
            {
                 Ext.Msg.alert('','Выберите строку для удаления');   
            }
                
            else 
            {
                Ext.Msg.show({
                title:'',
                message: 'Вы точно хотите удалить выбранную строку?',
                buttons: Ext.Msg.YESNO,
                icon: Ext.Msg.QUESTION,
                fn: function(btn) {
                if (btn === 'yes') {
                    Ext.Ajax.request({
                    url: '/index/delete-user-data',
                    params: {
                    id: gridPanel.getSelection()[0].get('id')
                    },
                    success: function(){}
                    });
                    storeUsers.reload();
                }
                } 
                });
                
            }
        }
         
    }
    ], 
    columns: [
        { 
            width: 255,
            header: 'Имя',
            dataIndex: 'first_name' 
        },
        {
           width: 255,
           header: 'Отчество',
           dataIndex: 'second_name'  
        },
        {
           width: 255,
           header: 'Фамилия',
           dataIndex: 'surname' 
        },
        {
           width: 255,
           header: 'Почта',
           dataIndex: 'email' 
        },
        {
           width: 255,
           header: 'Телефон',
           dataIndex: 'phone_number' 
        },
        {
            hidden: true,
            header: 'Id',
            dataIndex: 'id'  
        }
    ],
    renderTo: Ext.getBody()
    //listeners: {
   // rowclick: function() {
    //    Win.show();
       
    //}
//}
});


</script>

